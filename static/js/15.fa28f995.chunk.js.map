{"version":3,"sources":["pages/Register.js"],"names":["useStyles","makeStyles","theme","margin","marginTop","spacing","relative","position","progressbar","top","left","marginLeft","Register","classes","React","useState","username","email","password","confirmPassword","showPassword","showConfirmPassword","values","setValues","errors","setErrors","submit","disableBtn","setDisableBtn","enqueueSnackbar","useSnackbar","history","useHistory","handleChange","prop","event","target","value","validateEmail","validatePassword","validateUsername","handleMouseDownPassword","preventDefault","handleRegister","e","a","data","fetch","SERVER","method","headers","credentials","body","JSON","stringify","then","response","json","success","variant","push","message","catch","error","console","Fragment","maxWidth","disableGutters","mt","onSubmit","color","fullWidth","className","htmlFor","id","type","onChange","startAdornment","endAdornment","aria-label","onClick","onMouseDown","clsx","disabled","size","align","component","RouterLink","to"],"mappings":"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","file":"static/js/15.fa28f995.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link as RouterLink, useHistory } from 'react-router-dom'\r\nimport {\r\n    CircularProgress,\r\n    Box,\r\n    Container,\r\n    Input,\r\n    Typography,\r\n    FormControl,\r\n    InputLabel,\r\n    InputAdornment,\r\n    IconButton,\r\n    Button,\r\n    Link,\r\n    FormHelperText\r\n} from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport clsx from 'clsx';\r\nimport { useSnackbar } from 'notistack';\r\nimport { validateEmail, validatePassword, validateUsername } from '../utils/validator'\r\nimport { SERVER } from '../config'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    margin: {\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    relative: {\r\n        position: 'relative',\r\n    },\r\n    progressbar: {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        marginTop: -12,\r\n        marginLeft: -12,\r\n    }\r\n}));\r\n\r\nfunction Register() {\r\n    const classes = useStyles();\r\n    const [values, setValues] = React.useState({\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        showPassword: false,\r\n        showConfirmPassword: false,\r\n    });\r\n    const [errors, setErrors] = React.useState({\r\n        username: false,\r\n        email: false,\r\n        password: false,\r\n        confirmPassword: false\r\n    });\r\n    const [disableBtn, setDisableBtn] = React.useState({\r\n        submit: false,\r\n    })\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const history = useHistory();\r\n\r\n    const handleChange = (prop) => (event) => {\r\n        setValues({ ...values, [prop]: event.target.value });\r\n        if (prop === \"email\") {\r\n            setErrors({\r\n                email: !validateEmail(event.target.value)\r\n            })\r\n        } else if (prop === \"password\") {\r\n            setErrors({\r\n                password: !validatePassword(event.target.value)\r\n            })\r\n        } else if (prop === \"username\") {\r\n            setErrors({\r\n                username: !validateUsername(event.target.value)\r\n            })\r\n        } else if (prop === \"confirmPassword\") {\r\n            setErrors({\r\n                confirmPassword: event.target.value !== values.password ? true : false\r\n            })\r\n        }\r\n    };\r\n\r\n    const handleClickShowPassword = () => {\r\n        setValues({ ...values, showPassword: !values.showPassword });\r\n    };\r\n\r\n    const handleClickShowConfirmPassword = () => {\r\n        setValues({ ...values, showConfirmPassword: !values.showConfirmPassword });\r\n    };\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    const handleRegister = async (e) => {\r\n        e.preventDefault();\r\n        if (!errors.email && !errors.password && values.username && values.password && values.email && values.confirmPassword) {\r\n            setDisableBtn({\r\n                submit: true\r\n            });\r\n            const data = {\r\n                username: values.username,\r\n                email: values.email,\r\n                password: values.password,\r\n                confirmPassword: values.confirmPassword\r\n            }\r\n            await fetch(`${SERVER}/auth/register`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                credentials: 'include',\r\n                body: JSON.stringify(data),\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    if (data.success) {\r\n                        const variant = 'success';\r\n                        enqueueSnackbar('Registered successfully!', { variant });\r\n                        history.push(\"/login\")\r\n                    } else {\r\n                        const variant = 'error';\r\n                        enqueueSnackbar(data.message, { variant });\r\n                        setDisableBtn({\r\n                            submit: false\r\n                        })\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    const variant = 'error';\r\n                    enqueueSnackbar('Registration failed!', { variant });\r\n                    setDisableBtn({\r\n                        submit: false\r\n                    })\r\n                    console.error('Error:', error);\r\n                });\r\n        } else {\r\n            enqueueSnackbar('Username, Email and Password should be valid.', { variant: \"warning\" });\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Container maxWidth=\"xs\" disableGutters>\r\n                <Box mt={5}>\r\n                    <form onSubmit={handleRegister}>\r\n                        <Typography variant=\"h4\" color=\"initial\">Register</Typography>\r\n                        <Typography variant=\"body1\" color=\"inherit\">to manage your account on LinkBook</Typography>\r\n                        <Box mt={2}>\r\n                            <FormControl fullWidth className={classes.margin} error={errors.username}>\r\n                                <InputLabel htmlFor=\"userUsername\">Username</InputLabel>\r\n                                <Input\r\n                                    id=\"userUsername\"\r\n                                    type='text'\r\n                                    value={values.username}\r\n                                    onChange={handleChange('username')}\r\n                                    startAdornment={\r\n                                        <InputAdornment position=\"start\" >\r\n                                            <PersonIcon />\r\n                                        </InputAdornment>\r\n                                    }\r\n                                />\r\n                            </FormControl>\r\n                            <FormControl fullWidth className={classes.margin} error={errors.email}>\r\n                                <InputLabel htmlFor=\"userEmail\">Email</InputLabel>\r\n                                <Input\r\n                                    id=\"userEmail\"\r\n                                    type='email'\r\n                                    value={values.email}\r\n                                    onChange={handleChange('email')}\r\n                                    startAdornment={\r\n                                        <InputAdornment position=\"start\" >\r\n                                            <MailIcon />\r\n                                        </InputAdornment>\r\n                                    }\r\n                                />\r\n                            </FormControl>\r\n                            <FormControl fullWidth className={classes.margin} error={errors.password}>\r\n                                <InputLabel htmlFor=\"userPassword\">Password</InputLabel>\r\n                                <Input\r\n                                    id=\"userPassword\"\r\n                                    type={values.showPassword ? 'text' : 'password'}\r\n                                    value={values.password}\r\n                                    onChange={handleChange('password')}\r\n                                    startAdornment={\r\n                                        <InputAdornment position=\"start\" >\r\n                                            <VpnKeyIcon />\r\n                                        </InputAdornment>\r\n                                    }\r\n                                    endAdornment={\r\n                                        <InputAdornment position=\"end\" >\r\n                                            <IconButton\r\n                                                aria-label=\"toggle password visibility\"\r\n                                                onClick={handleClickShowPassword}\r\n                                                onMouseDown={handleMouseDownPassword}\r\n                                            >\r\n                                                {values.showPassword ? <VisibilityIcon /> : <VisibilityOffIcon />}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    }\r\n                                />\r\n                                <FormHelperText>Use 8 or more characters with a mix of letters, numbers & symbols</FormHelperText>\r\n                            </FormControl>\r\n                            <FormControl fullWidth className={classes.margin} error={errors.confirmPassword}>\r\n                                <InputLabel htmlFor=\"userConfirmPassword\">Confirm Password</InputLabel>\r\n                                <Input\r\n                                    id=\"userConfirmPassword\"\r\n                                    type={values.showConfirmPassword ? 'text' : 'password'}\r\n                                    value={values.confirmPassword}\r\n                                    onChange={handleChange('confirmPassword')}\r\n                                    startAdornment={\r\n                                        <InputAdornment position=\"start\" >\r\n                                            <VpnKeyIcon />\r\n                                        </InputAdornment>\r\n                                    }\r\n                                    endAdornment={\r\n                                        <InputAdornment position=\"end\" >\r\n                                            <IconButton\r\n                                                aria-label=\"toggle confirm password visibility\"\r\n                                                onClick={handleClickShowConfirmPassword}\r\n                                                onMouseDown={handleMouseDownPassword}\r\n                                            >\r\n                                                {values.showConfirmPassword ? <VisibilityIcon /> : <VisibilityOffIcon />}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    }\r\n                                />\r\n                            </FormControl>\r\n                            { /*<FormControl className={classes.margin}>\r\n                                <Link href=\"/forgetpass\" color=\"primary\">Forgot Your Password?</Link>\r\n                                </FormControl>*/}\r\n                            <FormControl fullWidth className={clsx(classes.margin, classes.relative)} >\r\n                                <Button variant=\"contained\" color=\"primary\" type='submit' disabled={disableBtn.submit}>Register</Button>\r\n                                {disableBtn.submit && <CircularProgress size={24} className={classes.progressbar}></CircularProgress>}\r\n                            </FormControl>\r\n                            <Typography variant=\"subtitle1\" color=\"initial\" className={classes.margin} align=\"center\">\r\n                                Do you have an account? <Link color=\"primary\" component={RouterLink} to=\"/login\" >Login</Link>\r\n                            </Typography>\r\n                        </Box>\r\n                    </form>\r\n                </Box>\r\n            </Container>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Register\r\n"],"sourceRoot":""}